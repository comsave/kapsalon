{"version":3,"sources":["kapsalon.jpeg","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppWrapper","styled","div","Kapsalon","Timer","Title","Remaining","Date","prototype","addDays","days","date","this","valueOf","setDate","getDate","availableAnimations","replace","split","getRandomAnimation","items","Math","floor","random","length","App","props","state","time","getTime","interval","setInterval","setState","clearInterval","daysToAdd","today","getDay","getHours","celebrationDate","getFullYear","getMonth","getCelebrationDate","parseFloat","toFixed","hours","minutes","getRemaining","animation","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,uC,40BCK3C,IAAMC,EAAaC,IAAOC,IAAV,IACIC,GAOdC,EAAQH,IAAOC,IAAV,KASLG,EAAQJ,IAAOC,IAAV,KAKLI,EAAYL,IAAOC,IAAV,KAKfK,KAAKC,UAAUC,QAAU,SAASC,GAC9B,IAAMC,EAAO,IAAIJ,KAAKK,KAAKC,WAE3B,OADAF,EAAKG,QAAQH,EAAKI,UAAYL,GACvBC,GAGX,IAmBMK,EAAsB,s7BAoB1BC,QAAQ,MAAO,KAAKC,MAAM,KAEtBC,EAAqB,kBAxBAC,EAwByBJ,GAxBVK,KAAKC,MAAMD,KAAKE,SAASH,EAAMI,SAA9C,IAAAJ,GAwFZK,E,YA7Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,EAAKC,WAHI,E,iFAOE,IAAD,OAClBjB,KAAKkB,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAC9CJ,KAAM,EAAKC,cACT,O,6CAIJI,cAAcrB,KAAKkB,Y,gCAInB,OA9DuB,WACzB,IAGII,EAHEC,EAAQ,IAAI5B,KAMhB2B,EALqB,IAIpBC,EAAMC,UAA+BD,EAAME,WAHtB,GAIV,EAGAF,EAAMC,UARG,EAQ0B,EAAID,EAAMC,SARpC,IAQiFD,EAAMC,SAG9G,IAAME,EAAkBH,EAAM1B,QAAQyB,GACtC,OAAO,IAAI3B,KAAK+B,EAAgBC,cAAeD,EAAgBE,WAAYF,EAAgBvB,UAAW,GAAI,EAAG,GAgDpG0B,GAAqBZ,WAAY,IAAItB,MAAOsB,Y,qCAInD,IAAInB,EAAOgC,YAAY9B,KAAKe,MAAMC,KAAO,IAAO,GAAK,GAAK,IAAIe,QAAQ,IAClEC,EAAQ,EACRC,EAAU,EAWd,OATGnC,EAAO,IACRkC,EAAQF,YAAmB,GAAPhC,GAAWiC,QAAQ,IACvCjC,EAAO,GAENkC,EAAQ,GAAKA,EAAQ,IACtBC,EAAUH,YAAoB,GAARE,GAAYD,QAAQ,IAC1CC,EAAQ,GAGH,CACLlC,OACAkC,QACAC,a,+BAIM,IAAD,EAC0BjC,KAAKkC,eAA9BpC,EADD,EACCA,KAAMkC,EADP,EACOA,MAAOC,EADd,EACcA,QACfE,EAAY5B,IAElB,OACE,kBAACnB,EAAD,KACE,kBAACI,EAAD,KACE,kBAACC,EAAD,iCACA,kBAACC,EAAD,CAAW0C,UAAS,UAAKD,EAAL,cACjBrC,EAAO,GAAK,6BAAMA,EAAKiC,QAAQ,GAAnB,SACZC,EAAQ,GAAK,6BAAMA,EAAMD,QAAQ,GAApB,UACbE,EAAU,GAAK,6BAAMA,EAAQF,QAAQ,GAAtB,mB,GAtDVM,IAAMC,WCrEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.eb55b59a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kapsalon.1201df11.jpeg\";","import React from 'react';\nimport styled from 'styled-components';\nimport 'animate.css';\nimport * as Kapsalon from './kapsalon.jpeg';\n\nconst AppWrapper = styled.div`\n  background: url(${Kapsalon}) repeat;\n  background-size: 100%;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Timer = styled.div`\n  position: relative;\n  top: 30%;\n  left: 0;\n  text-align: center;\n  padding: 20px;\n  background: rgba(255, 255, 255, .5);\n`;\n\nconst Title = styled.div`\n  font-size: 42px;\n  text-shadow: 4px 4px 2px rgba(150, 150, 150, 1);\n`;\n\nconst Remaining = styled.div`\n  font-size: 15vh;\n  color: red;\n`\n\nDate.prototype.addDays = function(days) {\n    const date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst getCelebrationDate = () => {\n  const today = new Date();\n  const celebrationDay = 5;\n  const celebrationTime = 12;\n  let daysToAdd;\n\n  if(today.getDay() === celebrationDay && today.getHours() < celebrationTime){\n    daysToAdd = 0;\n  }\n  else{\n    daysToAdd = today.getDay() >= celebrationDay ? 7 - today.getDay() + celebrationDay : celebrationDay - today.getDay();\n  }\n\n  const celebrationDate = today.addDays(daysToAdd);\n  return new Date(celebrationDate.getFullYear(), celebrationDate.getMonth(), celebrationDate.getDate(), 12, 0, 0);\n}\n\nconst getRandomFromArray = items => items[Math.floor(Math.random()*items.length)];\n\nconst availableAnimations = `\n  bounce\tflash\tpulse\trubberBand\nshake\theadShake\tswing\ttada\nwobble\tjello\tbounceIn\tbounceInDown\nbounceInLeft\tbounceInRight\tbounceInUp\tbounceOut\nbounceOutDown\tbounceOutLeft\tbounceOutRight\tbounceOutUp\nfadeIn\tfadeInDown\tfadeInDownBig\tfadeInLeft\nfadeInLeftBig\tfadeInRight\tfadeInRightBig\tfadeInUp\nfadeInUpBig\tfadeOut\tfadeOutDown\tfadeOutDownBig\nfadeOutLeft\tfadeOutLeftBig\tfadeOutRight\tfadeOutRightBig\nfadeOutUp\tfadeOutUpBig\tflipInX\tflipInY\nflipOutX\tflipOutY\tlightSpeedIn\tlightSpeedOut\nrotateIn\trotateInDownLeft\trotateInDownRight\trotateInUpLeft\nrotateInUpRight\trotateOut\trotateOutDownLeft\trotateOutDownRight\nrotateOutUpLeft\trotateOutUpRight\thinge\tjackInTheBox\nrollIn\trollOut\tzoomIn\tzoomInDown\nzoomInLeft\tzoomInRight\tzoomInUp\tzoomOut\nzoomOutDown\tzoomOutLeft\tzoomOutRight\tzoomOutUp\nslideInDown\tslideInLeft\tslideInRight\tslideInUp\nslideOutDown\tslideOutLeft\tslideOutRight\tslideOutUp\n`.replace(/\\s/g, ' ').split(' ');\n\nconst getRandomAnimation = () => getRandomFromArray(availableAnimations);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: this.getTime(),\n    };\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.setState({\n      time: this.getTime(),\n    }), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  getTime() {\n    return getCelebrationDate().getTime() - new Date().getTime();\n  }\n\n  getRemaining() {\n    let days = parseFloat((this.state.time / 1000 / 60 / 60 / 24).toFixed(5));\n    let hours = 0;\n    let minutes = 0;\n\n    if(days < 1) {\n      hours = parseFloat((days * 24).toFixed(4));\n      days = 0;\n    }\n    if(hours > 0 && hours < 1) {\n      minutes = parseFloat((hours * 60).toFixed(2));\n      hours = 0;\n    }\n\n    return {\n      days,\n      hours,\n      minutes,\n    };\n  }\n\n  render() {\n    const { days, hours, minutes } = this.getRemaining();\n    const animation = getRandomAnimation();\n\n    return (\n      <AppWrapper>\n        <Timer>\n          <Title>Celebrate Kapsalon in...</Title>\n          <Remaining className={`${animation} animated`}>\n            {days > 0 && <div>{days.toFixed(5)} days</div>}\n            {hours > 0 && <div>{hours.toFixed(4)} hours</div>}\n            {minutes > 0 && <div>{minutes.toFixed(3)} minutes</div>}\n          </Remaining>\n        </Timer>\n      </AppWrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}